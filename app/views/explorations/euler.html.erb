<script>

<% resolution = 500 %>

var steps = 120/23;
var y_start = 0;

var GraphPreview = {
    f: MathFunction.parse("x"),

    bindings: {},

    x1: 0.0,
    x2: 20.0,
    y1: -10.0,
    y2: 10.0,

    drawGraph: function() { 
	var f = GraphPreview.f;
	var paper = GraphPreview.paper;
	var bindings = GraphPreview.bindings;

	var x1 = GraphPreview.x1;
	var x2 = GraphPreview.x2;
	var y1 = GraphPreview.y1;
	var y2 = GraphPreview.y2;
	
	var resolution = <%= resolution %>;

	var numsteps = Math.floor(steps);

	var path = '';
	var code = 'M';
	var overrender = 1;
	for( var i=0; i<=steps; i ++ ) {
	    var y_prev;
	    
	    var x_pixel = resolution/steps*Math.round(i / overrender);
	    bindings["x"] = x;
	    bindings["y"] = Y;
	    var x;
	    var Y;
	    x = i * (x2-x1)/(overrender * steps) + x1;
	    if(!i){
	    	Y = y_start;
	    } else {
	    Y = y_prev + (x2-x1)/(overrender * steps) * f.evaluate( bindings );
	    }
	    y_prev = Y;
	    var j = resolution / (y2 - y1) * (y2 - Y);
	    var y_pixel = Math.round(j);
		if(y_pixel>5000)
			y_pixel = 5000;

		if(y_pixel<-5000)
			y_pixel = -5000;			

		path = path + code + ( Math.round(x_pixel) + ',' + Math.round(y_pixel) );
		code = 'L';
			    
	}
	
	paper.clear();
	
	for(var m=0;m<=20;m++){
		for(var n=-10;n<=10;n++){
			var m_pixel = Math.round(resolution*m/20);
			var n_pixel = Math.round(resolution / (y2 - y1) * (y2 - n));
	    	bindings["x"] = m;
	    	bindings["y"] = n;
	    	var slope = f.evaluate( bindings );
	    	var h1 = 5*Math.cos(Math.atan(slope));
	    	var h2 = 5*Math.sin(Math.atan(slope));
	    	var m_pixel_start = m_pixel - h1;
	    	var m_pixel_end = m_pixel + h1;
	    	var n_pixel_start = n_pixel + h2;
	    	var n_pixel_end = n_pixel - h2;	    	
	    	var p = paper.path("M" + m_pixel_start + "," + n_pixel_start + "L" + m_pixel_end + "," + n_pixel_end);	
	    		p.attr("stroke-width", "1");
	    		p.attr("stroke", "blue");
		}
	}
	
	var p = paper.path( path );
	p.attr("stroke-width", "4");	

	var axes = "M1,0V<%= resolution %> M0,<%= resolution/2 %>H<%= resolution %>";

	var p = paper.path( axes );
	p.attr("opacity", "0.5");	

	for( var i=Math.ceil(x1+0.0001); i <= Math.ceil(x2); i++ ) {
	    var x = (i - x1) * resolution / (x2 - x1);
	    var grid = "M" + Math.round(x) + ",0V<%= resolution %>";
	    var p = paper.path( grid );
	    p.attr("opacity", "0.15");	
	}

	for( var i=Math.ceil(y1+0.0001); i <= Math.ceil(y2); i++ ) {
	    var y = (i - y1) * resolution / (y2 - y1);
	    var grid = "M0," + Math.round(y) + ",0H<%= resolution %>";
	    var p = paper.path( grid );
	    p.attr("opacity", "0.15");	
	}
    },

    update: function () {

	var text = document.getElementById("MathInput").value; 
	if (text.length > 0) {
	    var math = MathJax.Hub.getAllJax($("#MathPreview")[0])[0];
	    try
	    {
                var f = this.f = MathFunction.parse(text);
		var text = 'dy/dx = ' + f.tex();
		MathJax.Hub.Queue(["Text",math,text]);
		$("#MathFunctionError").hide();
		$("#MathPreview").show();

                var vars = f.variables();



		vars = $.grep(vars, function(e) {
		    return e !== "x";
		});

		$("#sliders").children().hide();
		$("#wrap_step").show();
		$("#wrap_y_start").show();
		for( var i=0; i<vars.length; i++ ) {
		    $("#wrap_" + vars[i]).show();
		}
	 	$("#wrap_y").hide();
                // raphael see function
		window.setTimeout(GraphPreview.drawGraph,0);

		$("#graph").show();
		MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
		$("#claim").show();
	    }
	    catch(err)
	    {
		$("#MathFunctionError").show();
		$("#MathPreview").hide();
		$("#claim").hide();
	    }
	} else {
	    $("#MathPreview").hide();
	    $("#claim").hide();
	}
    },
    
};


  $(function() {
    var paper = Raphael(document.getElementById("graph"));
    GraphPreview.paper = paper;

	  <% for v in 'a'..'z' %>
      $( "#slider_<%= v %>" ).slider();
      $( "#slider_<%= v %>" ).slider( "option", "min", -10 );
      $( "#slider_<%= v %>" ).slider( "option", "max", 10 );
      $( "#slider_<%= v %>" ).slider( "option", "step", 0.1 );

      $( "#slider_<%= v %>" ).slider({
	  slide: function( event, ui ) { GraphPreview.bindings["<%= v %>"] = $( "#slider_<%= v %>" ).slider( "option", "value" );
					 window.setTimeout(GraphPreview.drawGraph,0); }
      });

      GraphPreview.bindings["<%= v %>"] = 0.0;
      $( "#slider_<%= v %>" ).slider( "option", "value", 0 );

	  <% end %>

      $( "#steps" ).slider();
      $( "#steps" ).slider( "option", "min", 1/20 );
      $( "#steps" ).slider( "option", "max", 1/3 );
      $( "#steps" ).slider( "option", "step", 17/12000 );
      $( "#steps" ).slider( "option", "value", 23/120 );

      $( "#steps" ).slider({
	  slide: function( event, ui ) { steps = 1/$( "#steps" ).slider( "option", "value" );
					 window.setTimeout(GraphPreview.drawGraph,0); }
      });

	  $( "#y_start" ).slider();
      $( "#y_start" ).slider( "option", "min", -10);
      $( "#y_start" ).slider( "option", "max", 10 );
      $( "#y_start" ).slider( "option", "step", 0.1 );
      $( "#y_start" ).slider( "option", "value", 0 );

      $( "#y_start" ).slider({
	  slide: function( event, ui ) { y_start = $( "#y_start" ).slider( "option", "value" );
					 window.setTimeout(GraphPreview.drawGraph,0); }
      });
      

      var text = "(a+1)*x/10";
      document.getElementById("MathInput").value = text;
      GraphPreview.f = MathFunction.parse(text);
      $("#MathPreview").show();
      $("#claim").show();
      $("#wrap_a").show();
      $("#wrap_step").show();
      $("#wrap_y_start").show();
      window.setTimeout(GraphPreview.drawGraph,0);

  });

</script>

<div class="page-header">
  <h1>Euler's Method! <small>Control the step size and initial condition with the sliders.</small></h1>
</div>

<div id="graph" style="float: left; padding-right: 12pt; padding-bottom: 12pt; font-family: 'Computer Modern'; width: <%= resolution %>px; height: <%= resolution %>px;"></div>
<div>

<div id="sliders" style="float: right;">

<div id="wrap_step" class="slider_wrap" style="padding-top: 12pt;  display:none; width: 320px;">
    <span><script type="math/tex">h</script></span><div id="steps" style="width: 90%; float: right;"></div>
</div>

<div id="wrap_y_start" class="slider_wrap" style="padding-top: 12pt;  display:none; width: 320px;">
    <span><script type="math/tex">y(0)</script></span><div id="y_start" style="width: 90%; float: right;"></div>
</div>

<% for v in 'a'..'z' %>
<div id="wrap_<%= v %>" class="slider_wrap" style="padding-top: 12pt;  display:none; width: 320px;">
    <span><script type="math/tex"><%= v %></script></span><div id="slider_<%= v %>" style="width: 90%; float: right;"></div>
</div>
<% end %>

</div>

<div>
    <script type="math/tex">dy/dx = </script>&nbsp;<input class="function" id="MathInput" onkeyup="GraphPreview.update()" autocomplete="off" type="text" value="" />
</div>

    <div id="claim" style="display: none; font-family: 'Computer Modern';"><span id="MathPreview"><script type="math/tex">dy/dx =  \frac{((a+1) \cdot x)}{10}</script></span>.</div>
<div id="MathFunctionError" style="display: none; font-weight: bold; color: red;">Error: the expression is invalid.</div>


</div>
